version: '3'
services:
  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./kafka_run_workaround.sh:/tmp/kafka_run_workaround.sh
    command: "bash -c '/tmp/kafka_run_workaround.sh && /etc/confluent/docker/run'"
    expose:
      - "9092"
    ports:
      - 9001:9092
    networks:
      - kafka-network
  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./kafka_run_workaround.sh:/tmp/kafka_run_workaround.sh
    command: "bash -c '/tmp/kafka_run_workaround.sh && /etc/confluent/docker/run'"
    expose:
      - "9092"
    ports:
      - 9002:9092
    networks:
      - kafka-network
  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    volumes:
      - ./kafka_run_workaround.sh:/tmp/kafka_run_workaround.sh
    expose:
      - "9092"
    ports:
      - 9003:9092
    command: "bash -c '/tmp/kafka_run_workaround.sh && /etc/confluent/docker/run'"
    networks:
      - kafka-network
  kafka-producer:
    restart: always
    build:
      context: ../pseudoclient
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-network
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - ./docker-hadoop/hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./docker-hadoop/hadoop.env
    networks:
      - kafka-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - ./docker-hadoop/hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./docker-hadoop/hadoop.env
    networks:
      - kafka-network

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    restart: always
    volumes:
      - ./docker-hadoop/hadoop_datanode2:/hadoop/dfs/data2
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./docker-hadoop/hadoop.env
    networks:
      - kafka-network
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./docker-hadoop/hadoop.env
    networks:
      - kafka-network

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./docker-hadoop/hadoop.env
    networks:
      - kafka-network
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - ./docker-hadoop/hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./docker-hadoop/hadoop.env
    networks:
      - kafka-network
  kafka-consumer:
    restart: always
    build:
      context: ./consumer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - namenode
    networks:
      - kafka-network
networks:
  kafka-network:
    driver: bridge
